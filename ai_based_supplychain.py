# -*- coding: utf-8 -*-
"""Ai Based Supplychain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lEovQ5vq-6OB_k7ZLubLL8HKEKyBV4VU
"""

# Install required packages (if needed)
pip install -q pandas scikit-learn matplotlib seaborn openpyxl

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

from google.colab import files

# Upload the Excel dataset
uploaded = files.upload()

# Load Excel file (using openpyxl engine)
df = pd.read_excel("flipkart_supply_chain_with_status.xlsx", engine='openpyxl')

# Display top rows
df.head()

# Drop unneeded columns
df.drop(columns=['Date', 'Product Name'], inplace=True, errors='ignore')

# Encode categorical variables
label_encoders = {}
for col in df.select_dtypes(include='object'):
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

df.head()

# Drop 'date' column to avoid dtype error
df.drop(columns=['date'], inplace=True)

# Encode categorical columns using LabelEncoder
le = LabelEncoder()
categorical_cols = df.select_dtypes(include='object').columns

for col in categorical_cols:
    df[col] = le.fit_transform(df[col])

# Define features and target
X = df.drop(columns=['Status'])  # Features
y = df['Status']                 # Target

#Split into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

dt_model = DecisionTreeClassifier(max_depth=5, random_state=42)
dt_model.fit(X_train, y_train)

# Evaluate
y_pred_dt = dt_model.predict(X_test)

print("üìä Decision Tree Classification Report:\n")
print(classification_report(y_test, y_pred_dt))

plt.figure(figsize=(16,8))
plot_tree(dt_model, feature_names=X.columns, class_names=['Not Delivered', 'Delivered'], filled=True)
plt.show()

rf_model = RandomForestClassifier(n_estimators=100, max_depth=7, random_state=42)
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)

print("üìä Random Forest Classification Report:\n")
print(classification_report(y_test, y_pred_rf))

cm = confusion_matrix(y_test, y_pred_rf)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Random Forest Confusion Matrix")
plt.show()

"""DEPLOYMENT

"""

import joblib

# Save the trained model
joblib.dump(dt_model, 'decision_tree_model.pkl')

# Optionally save Random Forest if you trained it
# joblib.dump(rf_model, 'random_forest_model.pkl')

app_code = """
import streamlit as st
import pandas as pd
import joblib

# Load the model
model = joblib.load('decision_tree_model.pkl')

st.title('üöö AI-Based Supply Chain Optimization')

st.markdown('Predict delivery **status** using trained Decision Tree model.')

# Input fields for user
Warehouse_block = st.selectbox('Warehouse Block', ['A', 'B', 'C', 'D', 'F'])
Mode_of_Shipment = st.selectbox('Mode of Shipment', ['Flight', 'Ship', 'Road'])
Customer_care_calls = st.number_input('Customer care calls', min_value=0)
Customer_rating = st.slider('Customer rating', 1, 5)
Cost_of_the_Product = st.number_input('Cost of the product', min_value=0)
Prior_purchases = st.number_input('Prior purchases', min_value=0)
Discount_offered = st.number_input('Discount offered', min_value=0)
Weight_in_gms = st.number_input('Weight (gms)', min_value=0)

# Encode categorical
warehouse_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'F': 4}
shipment_map = {'Flight': 0, 'Ship': 2, 'Road': 1}

data = pd.DataFrame({
    'Warehouse_block': [warehouse_map[Warehouse_block]],
    'Mode_of_Shipment': [shipment_map[Mode_of_Shipment]],
    'Customer_care_calls': [Customer_care_calls],
    'Customer_rating': [Customer_rating],
    'Cost_of_the_Product': [Cost_of_the_Product],
    'Prior_purchases': [Prior_purchases],
    'Discount_offered': [Discount_offered],
    'Weight_in_gms': [Weight_in_gms]
})

# Prediction
if st.button('Predict Delivery Status'):
    prediction = model.predict(data)
    result = 'On-Time Delivery ‚úÖ' if prediction[0] == 1 else 'Late Delivery ‚ö†Ô∏è'
    st.success(f'Prediction: {result}')
"""

# Save to file
with open("app.py", "w") as f:
    f.write(app_code)

!streamlit run app.py & npx localtunnel --port 8501

with open("requirements.txt", "w") as f:
    f.write("""streamlit
pandas
scikit-learn
joblib
""")

from google.colab import files
files.download("requirements.txt")

